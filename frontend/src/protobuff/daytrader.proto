syntax = "proto3";
package daytrader;

message Command{
    string user_id=1;
    string password = 2;
    float amount=3;
    string symbol=4;
    string filename=5;
    int32 transaction_id=6;
    string name = 7;
}

message Log{
    string command = 1;
    string server_name = 2;
    int32 transaction_num = 3;
    string username = 4;
    string stock_symbol = 5;
    float price = 6;
    float funds = 7;
    string filename = 8;
    string crypto_key = 9;
    int64 quote_server_time = 10;
    string account_action = 11;
    string error_message = 12;
    string debug_message = 13;
}

service Logger{
    rpc LogUserCommand(Log) returns (Response){} 
    rpc LogQuoteServerEvent(Log) returns (Response){} 
    rpc LogAccountTransaction(Log) returns (Response){} 
    rpc LogSystemEvent(Log) returns (Response){} 
    rpc LogErrorEvent(Log) returns (Response){} 
    rpc LogDebugEvent(Log) returns (Response){}
    rpc DumpLogs(Command) returns (Response){} 
    rpc DisplaySummary(Command) returns (SummaryResponse){}
}

message UserResponse {
    string user_id = 1;
    float balance = 2;
    map<string,int32> stocks = 3; 
}

message BalanceResponse {
    string user_id = 1;
    float balance = 2;
}

message StockUpdateResponse{
    string user_id = 1;
    map<string,int32> stocks = 2;
}

message PriceResponse {
    string user_id = 1;
    float price = 2;
}

message Trigger {
    float price = 1;
    float amount = 2;
}

message Transaction {
    string command_name = 1;
    string amount = 2;
    string stock_symbol = 3;
    string timestamp = 4;
}

message SummaryResponse {
    UserResponse user_info = 1;
    repeated Transaction transactions = 2;
    repeated Trigger buy_triggers = 3;
    repeated Trigger sell_triggers = 4;
}

message Response{
    string user_id = 1;
    string message = 2;
}

service DayTrader{
    rpc GetUser(Command) returns(UserResponse) {}
    rpc CreateUser(Command) returns(Response) {}
    rpc Add(Command) returns(BalanceResponse) {}
    rpc Quote(Command) returns(PriceResponse) {}
    rpc Buy(Command) returns(BalanceResponse) {}
    rpc Sell(Command) returns(StockUpdateResponse) {}
    rpc CommitBuy(Command) returns(StockUpdateResponse) {}
    rpc CommitSell(Command) returns(UserResponse) {}
    rpc CancelBuy(Command) returns(BalanceResponse) {}
    rpc CancelSell(Command) returns(StockUpdateResponse) {}
    rpc SetBuyAmount(Command) returns(BalanceResponse) {}
    rpc SetSellAmount(Command) returns(Response) {}
    rpc SetBuyTrigger(Command) returns(Response) {}
    rpc SetSellTrigger(Command) returns(StockUpdateResponse) {}
    rpc CancelSetBuy(Command) returns(BalanceResponse) {}
    rpc CancelSetSell(Command) returns(StockUpdateResponse) {}
    rpc DumpLog(Command) returns(Response) {}
    rpc DisplaySummary(Command) returns(SummaryResponse) {}
}