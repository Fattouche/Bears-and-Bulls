// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeDayTrader(in *jlexer.Lexer, out *server) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader(out *jwriter.Writer, in server) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v server) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v server) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *server) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *server) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader(l, v)
}
func easyjson89aae3efDecodeDayTrader1(in *jlexer.Lexer, out *UserStock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = string(in.String())
		case "StockSymbol":
			out.StockSymbol = string(in.String())
		case "Amount":
			out.Amount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader1(out *jwriter.Writer, in UserStock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"StockSymbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StockSymbol))
	}
	{
		const prefix string = ",\"Amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserStock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserStock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserStock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserStock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader1(l, v)
}
func easyjson89aae3efDecodeDayTrader2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance":
			out.Balance = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		case "Id":
			out.Id = string(in.String())
		case "BuyStack":
			if in.IsNull() {
				in.Skip()
				out.BuyStack = nil
			} else {
				in.Delim('[')
				if out.BuyStack == nil {
					if !in.IsDelim(']') {
						out.BuyStack = make([]*Buy, 0, 8)
					} else {
						out.BuyStack = []*Buy{}
					}
				} else {
					out.BuyStack = (out.BuyStack)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Buy
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Buy)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.BuyStack = append(out.BuyStack, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SellStack":
			if in.IsNull() {
				in.Skip()
				out.SellStack = nil
			} else {
				in.Delim('[')
				if out.SellStack == nil {
					if !in.IsDelim(']') {
						out.SellStack = make([]*Sell, 0, 8)
					} else {
						out.SellStack = []*Sell{}
					}
				} else {
					out.SellStack = (out.SellStack)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *Sell
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Sell)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.SellStack = append(out.SellStack, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StockMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.StockMap = make(map[string]int)
				} else {
					out.StockMap = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 int
					v3 = int(in.Int())
					(out.StockMap)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Balance))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"BuyStack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BuyStack == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.BuyStack {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SellStack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SellStack == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.SellStack {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"StockMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StockMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.StockMap {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.Int(int(v8Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader2(l, v)
}
func easyjson89aae3efDecodeDayTrader3(in *jlexer.Lexer, out *Stock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Symbol":
			out.Symbol = string(in.String())
		case "Price":
			out.Price = float32(in.Float32())
		case "Hash":
			out.Hash = string(in.String())
		case "TimeStamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader3(out *jwriter.Writer, in Stock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"Price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Price))
	}
	{
		const prefix string = ",\"Hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"TimeStamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.TimeStamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader3(l, v)
}
func easyjson89aae3efDecodeDayTrader4(in *jlexer.Lexer, out *SellTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = string(in.String())
		case "SellId":
			out.SellId = int64(in.Int64())
		case "Active":
			out.Active = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader4(out *jwriter.Writer, in SellTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"SellId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SellId))
	}
	{
		const prefix string = ",\"Active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SellTrigger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SellTrigger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SellTrigger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SellTrigger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader4(l, v)
}
func easyjson89aae3efDecodeDayTrader5(in *jlexer.Lexer, out *Sell) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int64(in.Int64())
		case "Price":
			out.Price = float32(in.Float32())
		case "StockSymbol":
			out.StockSymbol = string(in.String())
		case "IntendedCashAmount":
			out.IntendedCashAmount = float32(in.Float32())
		case "ActualCashAmount":
			out.ActualCashAmount = float32(in.Float32())
		case "StockSoldAmount":
			out.StockSoldAmount = int(in.Int())
		case "UserId":
			out.UserId = string(in.String())
		case "Timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader5(out *jwriter.Writer, in Sell) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"Price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Price))
	}
	{
		const prefix string = ",\"StockSymbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StockSymbol))
	}
	{
		const prefix string = ",\"IntendedCashAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntendedCashAmount))
	}
	{
		const prefix string = ",\"ActualCashAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ActualCashAmount))
	}
	{
		const prefix string = ",\"StockSoldAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StockSoldAmount))
	}
	{
		const prefix string = ",\"UserId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"Timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sell) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sell) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sell) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sell) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader5(l, v)
}
func easyjson89aae3efDecodeDayTrader6(in *jlexer.Lexer, out *BuyTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = string(in.String())
		case "BuyId":
			out.BuyId = int64(in.Int64())
		case "Active":
			out.Active = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader6(out *jwriter.Writer, in BuyTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"BuyId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BuyId))
	}
	{
		const prefix string = ",\"Active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuyTrigger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuyTrigger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuyTrigger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuyTrigger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader6(l, v)
}
func easyjson89aae3efDecodeDayTrader7(in *jlexer.Lexer, out *Buy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int64(in.Int64())
		case "Price":
			out.Price = float32(in.Float32())
		case "StockSymbol":
			out.StockSymbol = string(in.String())
		case "IntendedCashAmount":
			out.IntendedCashAmount = float32(in.Float32())
		case "ActualCashAmount":
			out.ActualCashAmount = float32(in.Float32())
		case "StockBoughtAmount":
			out.StockBoughtAmount = int(in.Int())
		case "UserId":
			out.UserId = string(in.String())
		case "Timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDayTrader7(out *jwriter.Writer, in Buy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"Price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Price))
	}
	{
		const prefix string = ",\"StockSymbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StockSymbol))
	}
	{
		const prefix string = ",\"IntendedCashAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntendedCashAmount))
	}
	{
		const prefix string = ",\"ActualCashAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ActualCashAmount))
	}
	{
		const prefix string = ",\"StockBoughtAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StockBoughtAmount))
	}
	{
		const prefix string = ",\"UserId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"Timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Buy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDayTrader7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Buy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDayTrader7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Buy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDayTrader7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Buy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDayTrader7(l, v)
}
