syntax = "proto3";
package daytrader;

message command{
    string user_id=1;
    float amount=2;
    string symbol=3;
    string filename=4;
    int32 transaction_id=5;
    string name = 6;
}

message log{
    string command = 1;
    string server_name = 2;
    int32 transaction_num = 3;
    string username = 4;
    string stock_symbol = 5;
    float price = 6;
    float funds = 7;
    string filename = 8;
    string crypto_key = 9;
    int64 quote_server_time = 10;
    string account_action = 11;
    string error_message = 12;
    string debug_message = 13;
}

service Logger{
    rpc LogUserCommand(log) returns (Response){} 
    rpc LogQuoteServerEvent(log) returns (Response){} 
    rpc LogAccountTransaction(log) returns (Response){} 
    rpc LogSystemEvent(log) returns (Response){} 
    rpc LogErrorEvent(log) returns (Response){} 
    rpc LogDebugEvent(log) returns (Response){}
    rpc DumpLogs(command) returns (Response){} 
}

message UserResponse {
    string user_id = 1;
    float balance = 2;
    map<string,int32> stocks = 3; 
}

message BalanceResponse {
    string user_id = 1;
    float balance = 2;
}

message StockUpdateResponse{
    string user_id = 1;
    map<string,int32> stocks = 2;
}

message PriceResponse {
    string user_id = 1;
    float price = 2;
}

message Trigger {
    float price = 1;
    float amount = 2;
}

message Transaction {
    string command_name = 1;
    string amount = 2;
    string stock_symbol = 3;
    string timestamp = 4;
}

message SummaryResponse {
    UserResponse user_info = 1;
    repeated Transaction transactions = 2;
    repeated Trigger buy_triggers = 3;
    repeated Trigger sell_triggers = 4;
}

message Response{
    string user_id = 1;
    string message = 2;
}

service DayTrader{
    rpc GetUser(command) returns(UserResponse) {}
    rpc CreateUser(command) returns(UserResponse) {}
    rpc Add(command) returns(BalanceResponse) {}
    rpc Quote(command) returns(PriceResponse) {}
    rpc Buy(command) returns(BalanceResponse) {}
    rpc Sell(command) returns(StockUpdateResponse) {}
    rpc CommitBuy(command) returns(StockUpdateResponse) {}
    rpc CommitSell(command) returns(UserResponse) {}
    rpc CancelBuy(command) returns(BalanceResponse) {}
    rpc CancelSell(command) returns(StockUpdateResponse) {}
    rpc SetBuyAmount(command) returns(BalanceResponse) {}
    rpc SetSellAmount(command) returns(Response) {}
    rpc SetBuyTrigger(command) returns(Response) {}
    rpc SetSellTrigger(command) returns(StockUpdateResponse) {}
    rpc CancelSetBuy(command) returns(BalanceResponse) {}
    rpc CancelSetSell(command) returns(StockUpdateResponse) {}
    rpc DumpLog(command) returns(Response) {}
    rpc DisplaySummary(command) returns(SummaryResponse) {}
}